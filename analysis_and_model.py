import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, roc_auc_score
from ucimlrepo import fetch_ucirepo
from sklearn.model_selection import GridSearchCV


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ–∞–Ω—Å–∞
def init_session_state():
    if 'data_loaded' not in st.session_state:
        st.session_state.data_loaded = False
    if 'data' not in st.session_state:
        st.session_state.data = None
    if 'model_trained' not in st.session_state:
        st.session_state.model_trained = False
    if 'model' not in st.session_state:
        st.session_state.model = None
    if 'model_type' not in st.session_state:
        st.session_state.model_type = "Random Forest"
    if 'scaler' not in st.session_state:
        st.session_state.scaler = None
    if 'le' not in st.session_state:
        st.session_state.le = None
    if 'X_train' not in st.session_state:
        st.session_state.X_train = None
    if 'X_test' not in st.session_state:
        st.session_state.X_test = None
    if 'y_train' not in st.session_state:
        st.session_state.y_train = None
    if 'y_test' not in st.session_state:
        st.session_state.y_test = None
    if 'feature_engineered' not in st.session_state:
        st.session_state.feature_engineered = False


def standardize_column_names(df):
    """–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É"""
    new_columns = []
    for col in df.columns:
        col = re.sub(r'[\[\]]', '', col)
        col = re.sub(r'\s+', ' ', col).strip()
        col_lower = col.lower()

        if 'air' in col_lower and 'temp' in col_lower:
            new_columns.append('Air temperature')
        elif 'process' in col_lower and 'temp' in col_lower:
            new_columns.append('Process temperature')
        elif 'rotation' in col_lower and 'speed' in col_lower:
            new_columns.append('Rotational speed')
        elif 'torque' in col_lower:
            new_columns.append('Torque')
        elif 'tool' in col_lower and 'wear' in col_lower:
            new_columns.append('Tool wear')
        elif 'type' in col_lower:
            new_columns.append('Type')
        elif 'machine' in col_lower and 'failure' in col_lower:
            new_columns.append('Machine failure')
        elif 'udi' in col_lower:
            new_columns.append('UDI')
        elif 'product' in col_lower and 'id' in col_lower:
            new_columns.append('Product ID')
        else:
            new_columns.append(col)

    df.columns = new_columns
    return df


def add_engineered_features(df):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
    # –ú–æ—â–Ω–æ—Å—Ç—å = –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è * –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç
    df['Power'] = df['Rotational speed'] * df['Torque']

    # –†–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
    df['Temp_diff'] = df['Process temperature'] - df['Air temperature']

    # –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑–Ω–æ—Å–∞ –∏ –∫—Ä—É—Ç—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è OSF)
    df['Wear_Torque'] = df['Tool wear'] * df['Torque']

    # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –æ—Ç–∫–∞–∑–æ–≤
    df['TWF_risk'] = ((df['Tool wear'] >= 200) & (df['Tool wear'] <= 240)).astype(int)
    df['HDF_risk'] = ((df['Temp_diff'] < 8.6) & (df['Rotational speed'] < 1380)).astype(int)
    df['PWF_risk'] = ((df['Power'] < 3500) | (df['Power'] > 9000)).astype(int)

    # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è OSF –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    df['OSF_threshold'] = df['Type'].map({'L': 11000, 'M': 12000, 'H': 13000})
    df['OSF_risk'] = (df['Wear_Torque'] > df['OSF_threshold']).astype(int)

    return df


def analysis_and_model_page():
    init_session_state()
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª—å")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type="csv")

    if uploaded_file is not None:
        try:
            st.session_state.data = pd.read_csv(uploaded_file)
            st.session_state.data = standardize_column_names(st.session_state.data)
            st.session_state.data_loaded = True
            st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

    if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"):
        try:
            dataset = fetch_ucirepo(id=601)
            st.session_state.data = pd.concat([dataset.data.features, dataset.data.targets], axis=1)
            st.session_state.data = standardize_column_names(st.session_state.data)
            st.session_state.data_loaded = True
            st.success("–î–∞–Ω–Ω—ã–µ UCI —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    if not st.session_state.data_loaded:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
        return

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.subheader("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {st.session_state.data.shape[0]}, —Å—Ç–æ–ª–±—Ü–æ–≤: {st.session_state.data.shape[1]}")
    st.write("–ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(st.session_state.data.head(3))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    required_columns = {
        'Type',
        'Air temperature',
        'Process temperature',
        'Rotational speed',
        'Torque',
        'Tool wear',
        'Machine failure'
    }

    if not required_columns.issubset(st.session_state.data.columns):
        missing = required_columns - set(st.session_state.data.columns)
        st.error(f"–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing)}")
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:")
        st.write(list(required_columns))
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    if not st.session_state.feature_engineered:
        st.session_state.data = add_engineered_features(st.session_state.data)
        st.session_state.feature_engineered = True
        st.success("–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏!")

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    st.header("2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    data_cleaned = st.session_state.data.drop(
        columns=['UDI', 'Product ID', 'TWF', 'HDF', 'PWF', 'OSF', 'RNF'],
        errors='ignore'
    )

    if st.session_state.le is None:
        st.session_state.le = LabelEncoder()
        data_cleaned['Type'] = st.session_state.le.fit_transform(data_cleaned['Type'])
    else:
        data_cleaned['Type'] = st.session_state.le.transform(data_cleaned['Type'])

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    num_cols = [
        'Air temperature',
        'Process temperature',
        'Rotational speed',
        'Torque',
        'Tool wear',
        'Power',
        'Temp_diff',
        'Wear_Torque'
    ]

    # –¢–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
    num_cols = [col for col in num_cols if col in data_cleaned.columns]

    if st.session_state.scaler is None:
        st.session_state.scaler = StandardScaler()
        data_cleaned[num_cols] = st.session_state.scaler.fit_transform(data_cleaned[num_cols])
    else:
        data_cleaned[num_cols] = st.session_state.scaler.transform(data_cleaned[num_cols])

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    X = data_cleaned.drop(columns=['Machine failure'])
    y = data_cleaned['Machine failure']

    if st.session_state.X_train is None:
        (
            st.session_state.X_train,
            st.session_state.X_test,
            st.session_state.y_train,
            st.session_state.y_test
        ) = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
        st.info("–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏")

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    st.header("3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    model_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
        ["Logistic Regression", "Random Forest", "XGBoost", "SVM"],
        key="model_select"
    )

    if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å") or st.session_state.model_trained:
        if not st.session_state.model_trained or model_type != st.session_state.model_type:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–ø –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –æ–±—É—á–µ–Ω–∞
            if model_type == "Logistic Regression":
                model = LogisticRegression(max_iter=1000, class_weight='balanced')
            elif model_type == "Random Forest":
                # –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Random Forest
                model = RandomForestClassifier(
                    n_estimators=500,
                    max_depth=12,
                    min_samples_split=5,
                    min_samples_leaf=2,
                    class_weight='balanced',
                    random_state=42,
                    n_jobs=-1
                )
            elif model_type == "XGBoost":
                model = XGBClassifier(
                    n_estimators=500,
                    max_depth=7,
                    learning_rate=0.05,
                    subsample=0.8,
                    colsample_bytree=0.8,
                    scale_pos_weight=9,  # –£—á–µ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤ (10% –æ—Ç–∫–∞–∑–æ–≤)
                    random_state=42
                )
            else:
                model = SVC(probability=True, class_weight='balanced')

            # –û–±—É—á–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            with st.spinner(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_type}..."):
                model.fit(st.session_state.X_train, st.session_state.y_train)

            st.session_state.model = model
            st.session_state.model_type = model_type
            st.session_state.model_trained = True
            st.success(f"–ú–æ–¥–µ–ª—å {model_type} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        else:
            model = st.session_state.model
            st.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å {model_type}")

        # –û—Ü–µ–Ω–∫–∞
        y_pred = model.predict(st.session_state.X_test)
        y_proba = model.predict_proba(st.session_state.X_test)[:, 1] if hasattr(model, "predict_proba") else None

        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏")
        col1, col2 = st.columns(2)
        accuracy = accuracy_score(st.session_state.y_test, y_pred)
        col1.metric("Accuracy", f"{accuracy:.4f}")

        if y_proba is not None:
            roc_auc = roc_auc_score(st.session_state.y_test, y_proba)
            col2.metric("ROC-AUC", f"{roc_auc:.4f}")
        else:
            col2.metric("ROC-AUC", "N/A")

        # Confusion Matrix
        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
        fig, ax = plt.subplots()
        sns.heatmap(
            confusion_matrix(st.session_state.y_test, y_pred),
            annot=True, fmt='d', cmap='Blues',
            ax=ax,
            xticklabels=['–ù–µ—Ç –æ—Ç–∫–∞–∑–∞', '–û—Ç–∫–∞–∑'],
            yticklabels=['–ù–µ—Ç –æ—Ç–∫–∞–∑–∞', '–û—Ç–∫–∞–∑']
        )
        ax.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
        ax.set_ylabel('–§–∞–∫—Ç')
        st.pyplot(fig)

        # ROC Curve
        if y_proba is not None:
            st.subheader("ROC-–∫—Ä–∏–≤–∞—è")
            fpr, tpr, _ = roc_curve(st.session_state.y_test, y_proba)
            plt.figure()
            plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.4f})')
            plt.plot([0, 1], [0, 1], 'k--')
            plt.xlabel('False Positive Rate')
            plt.ylabel('True Positive Rate')
            plt.title('ROC Curve')
            plt.legend()
            st.pyplot(plt)

            # –†–∞—Å—Å—á–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
            precision = confusion_matrix(st.session_state.y_test, y_pred)[1, 1] / (
                        confusion_matrix(st.session_state.y_test, y_pred)[1, 1] +
                        confusion_matrix(st.session_state.y_test, y_pred)[0, 1])
            recall = confusion_matrix(st.session_state.y_test, y_pred)[1, 1] / (
                        confusion_matrix(st.session_state.y_test, y_pred)[1, 1] +
                        confusion_matrix(st.session_state.y_test, y_pred)[1, 0])
            st.info(f"Precision (—Ç–æ—á–Ω–æ—Å—Ç—å): {precision:.4f} | Recall (–ø–æ–ª–Ω–æ—Ç–∞): {recall:.4f}")

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    st.header("4. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    with st.form("prediction_form"):
        st.write("### –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:")

        col1, col2 = st.columns(2)
        air_temp = col1.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ [K]", 295.0, 305.0, 300.0)
        process_temp = col2.number_input("–†–∞–±–æ—á–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ [K]", 305.0, 315.0, 310.0)

        col1, col2 = st.columns(2)
        rotational_speed = col1.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è [rpm]", 1000, 3000, 1500)
        torque = col2.number_input("–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç [Nm]", 10.0, 100.0, 40.0)

        col1, col2 = st.columns(2)
        tool_wear = col1.number_input("–ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ [min]", 0, 300, 50)
        product_type = col2.selectbox("–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞", ["L", "M", "H"])

        submit_button = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞")

        if submit_button:
            input_data = pd.DataFrame({
                'Type': [product_type],
                'Air temperature': [air_temp],
                'Process temperature': [process_temp],
                'Rotational speed': [rotational_speed],
                'Torque': [torque],
                'Tool wear': [tool_wear]
            })

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            input_data = add_engineered_features(input_data)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
            input_data['Type'] = st.session_state.le.transform(input_data['Type'])

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
            input_data_cols = [col for col in num_cols if col in input_data.columns]
            input_data[input_data_cols] = st.session_state.scaler.transform(input_data[input_data_cols])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏
            if st.session_state.model is None:
                st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Random Forest")
                model = RandomForestClassifier(
                    n_estimators=500,
                    max_depth=12,
                    min_samples_split=5,
                    min_samples_leaf=2,
                    class_weight='balanced',
                    random_state=42
                )
                model.fit(st.session_state.X_train, st.session_state.y_train)
                st.session_state.model = model
                st.session_state.model_type = "Random Forest"
                st.session_state.model_trained = True
            else:
                model = st.session_state.model

            prediction = model.predict(input_data)[0]

            if hasattr(model, "predict_proba"):
                probability = model.predict_proba(input_data)[0][1]
            else:
                probability = prediction

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

            # –†–∞—Å—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
            power = rotational_speed * torque
            temp_diff = process_temp - air_temp
            wear_torque = tool_wear * torque

            # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            osf_threshold = {'L': 11000, 'M': 12000, 'H': 13000}[product_type]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫–∞–∑–æ–≤
            twf_risk = 200 <= tool_wear <= 240
            hdf_risk = (temp_diff < 8.6) and (rotational_speed < 1380)
            pwf_risk = (power < 3500) or (power > 9000)
            osf_risk = wear_torque > osf_threshold

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∏—Å–∫–∞—Ö
            st.info("### –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:")
            cols = st.columns(4)
            cols[0].metric("TWF –†–∏—Å–∫", "‚úÖ" if not twf_risk else "‚ùå", "–ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
            cols[1].metric("HDF –†–∏—Å–∫", "‚úÖ" if not hdf_risk else "‚ùå", "–¢–µ–ø–ª–æ–æ—Ç–≤–æ–¥")
            cols[2].metric("PWF –†–∏—Å–∫", "‚úÖ" if not pwf_risk else "‚ùå", "–ú–æ—â–Ω–æ—Å—Ç—å")
            cols[3].metric("OSF –†–∏—Å–∫", "‚úÖ" if not osf_risk else "‚ùå", "–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if prediction == 1 or any([twf_risk, hdf_risk, pwf_risk, osf_risk]):
                st.error(f"‚ùå –í–´–°–û–ö–ê–Ø –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –û–¢–ö–ê–ó–ê: {probability:.2%}")
                st.progress(float(probability))
                if twf_risk:
                    st.warning("‚ö†Ô∏è –†–∏—Å–∫ –æ—Ç–∫–∞–∑–∞ –∏–∑-–∑–∞ –∏–∑–Ω–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (TWF)")
                if hdf_risk:
                    st.warning("‚ö†Ô∏è –†–∏—Å–∫ –æ—Ç–∫–∞–∑–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —Ç–µ–ø–ª–æ–æ—Ç–≤–æ–¥–∞ (HDF)")
                if pwf_risk:
                    st.warning(f"‚ö†Ô∏è –†–∏—Å–∫ –æ—Ç–∫–∞–∑–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–æ—â–Ω–æ—Å—Ç—å—é (PWF) - –º–æ—â–Ω–æ—Å—Ç—å: {power:.1f} –í—Ç")
                if osf_risk:
                    st.warning(
                        f"‚ö†Ô∏è –†–∏—Å–∫ –æ—Ç–∫–∞–∑–∞ –∏–∑-–∑–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ (OSF) - –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑–Ω–æ—Å–∞ –∏ –º–æ–º–µ–Ω—Ç–∞: {wear_torque:.0f} > {osf_threshold}")
            else:
                st.success(f"‚úÖ –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞: {probability:.2%}")
                st.progress(float(probability))

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            st.info(f"–ú–æ–¥–µ–ª—å: {st.session_state.model_type}")
            st.info(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞: {probability:.4f}")
            st.info(f"–†–∞—Å—á–µ—Ç–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: {power:.1f} –í—Ç, –†–∞–∑–Ω–∏—Ü–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: {temp_diff:.1f} K")